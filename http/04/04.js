//Http 매서드

/**
 * URI의 설계할 떄 가장 중요한 것은 리소스 식별이다.
 * 
 * API URI (uniform resource identifier) / api 통합 리소스 식별
 * 
 * 리소스는 무엇일까?
 *  - 회원을 등록하고 수정하고 조회하는 것이 아닌 회원이라는 개념자체가 바로 리소스이다.
 *      - 예) 미네랄을 캐라, 미네랄이 리소스이다. 즉 헹위가 리소스가 아니라 그자체가 리소스
 *  
 * 리소스 식별방법
 * - 회원을 등록하고 수정하고 조회하는 이런 행위들을 모두 배제
 * - 회원이라는 리소스만 식별하면 된다. -> 회원 리소스를 URI에 매핑
 * 
 * api 설계 예시
 * -회원 목록 조회 /members 
 * -회원 조회 /members/{id}
 * -회원 등록 /members/{id}
 * -회원 수정 /members/{id}
 * -회원 삭제 /members/{id}
 * 
 * +참고) 계층 구조상 상위 컬렉션으로 보고 복수 단어로 사용 권장 members
 * 
 * 문제 /members/{id} 리소스만 가지고 어찌 구분해?
 * 
 * 
 * 그래서 방법중에 하나가
 * 리소스와 행위를 분리한다
 * 가장 중요한 것은 리소스를 식별하는 것
 * 
 * - URI는 리소스만 식별
 * - 리소스와 해당 리소스를 대상으로 하는 행위을 분리
 *      - 리소스: 회원
 *      - 행위: 조회, 등록, 삭제, 변경
 * - 리소소의 명사, 행위는 동사(미네랄을 캐라)
 * - 행위(메서드)는 어떻게 구분할끼?
 * 
 * 
 * 
 * 
 * 메서드란?
 * 클라이언트가 서버에 요청을 할 때 기대하는 행동
 * 
 * HTTP 메서드 종류
 * - GET: 리소스 조회
 * - POST: 요청 데이터 처리(요청한 데이터 보낼게~), 주로 등록에 사용 
 * - PUT: 리소스를 대체(데이터를 보낼테니 대체해줘 수정임), 해당 리소스가 없으면 생성
 * - PATCH: 리소스 부분 변경(특정 부분만 바꿀 때)
 * - DELETE: 리소스 삭제
 * 
 * GET
 * 
 *  * GET /search?q=hello&hl=ko HTTP/1.1
   Host: www.google.com
 * 
 * 
 * - 리소스 조회
 * - 서버에 전달하고 싶은 데이터는 query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달
 * - 메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않음
 *
 * 
 * 
 * 
 * POST
 * 
 * POST /members HTTP/1.1
 * Content-Type: application/json
 * 
 * {
 *   "username": "hello",
 *   "age": 20
 * }
 * 
 * - 요청 데이터 처리 / 내가 서버에 데이터를 줄게 서버 니가 받아서 처리해줘 즉 클라이언트가 서버에 데이터를 주고 서버가 처리해줘
 * - 메시지 바디를 통해 서버로 요청 데이터 전달
 * - 서버는 요청 데이터를 처리
 *      - 메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다.
 * - 주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용
 * - 클라이언트가 데이터를 서버에 보내면 서버에서 location이 포함한 응답 데이터를 던져줌 201이나 다른 번호들 created라고 보내줌
 * 
 * 그런데 요청 데이터를 어찌 처리한다는 걸까?
 * - 대상 리소스가 리소스의 고유한 의미 체계에 따라 요청에 포함 된 표현을 처리하도록 요청
 *      예
 *          - HTML FORM에 입력한 정보로 회원 가입 (HTML 양식에 입력 된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공)
 *          - 게시판 글쓰기, 댓글 달기 (게시판, 뉴스 그룹, 메일링 리스트, 블로그 또는 유사한 기사 그룹에 메시지 게시)
 *          - 신슈 주문 생성 (서버가 아직 식별하지 않은 새 리소스 생성)
 *          - 한 문서 끝에 내용 추가하기 (기존 자원에 데이터 추가)
 * 정리: 이 리소스 URI에 POST 요청이 오면 요청 데이터를 어떻게 처리할지 리소스마다 따로 정해야 함 => 정해진것 없음
 * 
 * - 등록, 게시, 생성, 추가, 프로세스 변경까지는 post
 * 
 * 정리하자면
 * 새 리소스 생성
 * - 서버가 아직 식별하지 않은 . 새리소스 생성
 * 요청 데이터 처리
 * - 단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우
 *      - 주문에서 결제완료 => 배달시작 => 배발완료 처럼 단쉬 값 변경을 넘어 프로세의 상태가 변경되는 경우
 * - POST의 결과로 새로운 리소스가 생성되 않을 수도 있음
 *      예) POST /orders/{orderid}/start-delivery(컨트롤 URI)
 * 다른 메서드로 처리하기 애매한 경우
 * - JSON으로 조회 데이털르 넘겨야 하는데 , GET 메서드를 사용하기 어려운 경우
 * - 애매하면 POST
 */