터미널 명령어

nvm -list 노드버전마스터 노드 목록
nvm use 노드버전 사용

node -v 노드버전 확인

npm -v npm버전 확인
npm init 패키지 정의
npm init -y 패키지 한번에 정의 후 실행
npm install 네이밍 패키지 지역 설치 === npm i 
npm uninstall 네이밍 패키지 제거
npm install 네이밍 --global 시스템 전역 설치/ 시스템 레벨에 전역으로 설치하는 거 === --g


지역설치에도 두가지 옵션
npm i 네이밍 --save-dev 아니면 npm i 네이밍 -D  //  이렇게 설치하면 package.json에서 devDependencies에 설치

package.json 에서 dependencies와 devDependencies 차이
dependencies - 애플리케이션 로직과 관리 있는 것 , 화면의 로직과 직접적인 관련이 있는 것// ui 등등
devDependencies - 웹팩 같은 개발을 할 때 도움을 주는 보조 라이브러리용 ex)웹팩 사스 등등 즉 화면 구성 로직에 없어도 괜찮으면 여기에 넣어라

개발용 라이브러리와 배포용 라이브러리 구분하는 법
npm run build 프로덕션 모드 사용

npm run build라는 것을 사용하면 devDependencies 안에 있는 것들은 설치를 하지 않는다.


전역 설치 경로 
# window
%USERPROFILE%\AppData\Roaming\npm\node_modules

# mac
/usr/local/lib/node_modules



npm 장점
1. 스크립트 태그로 불러오는 것 보다 패키지로 불러오는 것이 좋다 버전관리 및 연결 패키지들 버전 관리 위해 // package.json에서 관리 위해
2. 해당 cdn으로 불러오는 것 보다는 내 로컬 컴퓨터에서 불러올 수 있어서




웹팩이란
최신 프론트엔드 프레임 워크에서 가장 많이 사용되는 모듈 번들러
모듈 번들러란 웹 애플리케이션을 구성하는 자원(HTML, CSS, Javscript, Images 등)을 모두 각각의 모듈로 보고 이를 조합해서 병합된 하나의 결과물을 만드는 도구를 의미합니다

모듈이란?
모듈이란 프로그래밍 관점에서 특정 기능을 갖는 작은 코드 단위를 의미합니다. 자바스크립트로 치면 아래와 같은 코드가 모듈입니다.

모듈 번들링이란?
웹 애플리케이션을 구성하는 몇십, 몇백개의 자원들을 하나의 파일로 병합 및 압축 해주는 동작을 모듈 번들링이라고 합니다.
빌드, 번들링, 변환 이 세 단어 모두 같은 의미입니다.

웹팩 설치
npm init -y
npm i webpack webpack-cli -D


위에 셋팅으로 그대로 하고 
package.json 커스텀 스크립트 명령어 확인

npm run build로 dist 생성



"scripts": {
  "build": "webpack --mode=none"
}





생성 했을 경우

// webpack.config.js
// `webpack` command will pick up this config setup by default
var path = require('path');

module.exports = {
  mode: 'none',
  entry: './src/index.js',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist')
  }
};



"scripts": {
  "build": "webpack"
}


webpack.config.js 이걸 만들고 안에 코드들을 작성하면
 package.json에 "scripts": 에 주저리 코드를 쓸 필요 없다.